using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGenerator.Core;

public class GeneratorEngine
{
    private readonly string _generatorNamespace = "TestGenerator";
    public List<Test> Generate(string source)
    {
        var tests = new List<Test>();
        CompilationUnitSyntax? root = null;
        try
        {
            root = CSharpSyntaxTree.ParseText(source).GetCompilationUnitRoot();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        if (root != null)
        {
            var namespaces = root.DescendantNodes().OfType<NamespaceDeclarationSyntax>();
            var fileScopedNamespaces = root.DescendantNodes().OfType<FileScopedNamespaceDeclarationSyntax>();
            var isScopedNamespacesExist = false;

            FileScopedNamespaceDeclarationSyntax? scopedNamespace = null;
            foreach (var fsn in fileScopedNamespaces)
            {
                scopedNamespace = SyntaxFactory.FileScopedNamespaceDeclaration(
                    SyntaxFactory.QualifiedName(fsn.Name, SyntaxFactory.IdentifierName(_generatorNamespace)));
                isScopedNamespacesExist = true;
            }

            var usings = root.DescendantNodes().OfType<UsingDirectiveSyntax>()
                .Where(u => !u.StaticKeyword.HasTrailingTrivia).ToList();
            foreach (var n in namespaces)
            {
                usings.Add(SyntaxFactory.UsingDirective(n.Name));
            }

            usings.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("NUnit.Framework")));

            var classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>()
                .Where(classItem => classItem.Modifiers.Any(SyntaxKind.PublicKeyword));

            foreach (var classItem in classes)
            {
                tests.Add(GenerateTest(classItem, usings, isScopedNamespacesExist, scopedNamespace));
            }
        }

        return tests;
    }

    private Test GenerateTest(ClassDeclarationSyntax classDeclaration,
                            List<UsingDirectiveSyntax> usings,
                            bool isScopedNamespacesExist,
                            FileScopedNamespaceDeclarationSyntax? scopedNamespace)
    {
        var className = classDeclaration.Identifier.Text;
        var members = new List<MemberDeclarationSyntax>();
        var sourceMethods = classDeclaration.DescendantNodes().OfType<MethodDeclarationSyntax>()
            .Where(sourceMethod => sourceMethod.Modifiers.Any(SyntaxKind.PublicKeyword)).ToList();

        var map = new Dictionary<string, int>();
        foreach (var method in sourceMethods)
        {
            var name = method.Identifier.ValueText + "Test";
            if (map.ContainsKey(method.Identifier.ValueText))
            {
                map[method.Identifier.ValueText]++;
                name += map[method.Identifier.ValueText];
            }
            else
            {
                map.Add(method.Identifier.ValueText, 0);
            }

            var attributeList = SyntaxFactory.SingletonList(
                SyntaxFactory.AttributeList(
                    SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("Test"))
                        )));
            
            var modificatorList = SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword));
            
            var methodBody = SyntaxFactory.Block(
                SyntaxFactory.ExpressionStatement(
                    SyntaxFactory.InvocationExpression(
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression, SyntaxFactory.IdentifierName("Assert"), SyntaxFactory.IdentifierName("Fail")
                        )
                    )
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.LiteralExpression(
                                        SyntaxKind.StringLiteralExpression,
                                        SyntaxFactory.Literal("autogenerated stub")))))
                    )));
            
            members.Add(SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.VoidKeyword)), name)
                        .WithAttributeLists(attributeList)
                        .WithModifiers(modificatorList)
                        .WithBody(methodBody));
        }
        MemberDeclarationSyntax classDecl = SyntaxFactory.ClassDeclaration($"{className}Tests")
                                .WithAttributeLists(
                                    SyntaxFactory.SingletonList(
                                        SyntaxFactory.AttributeList(
                                            SyntaxFactory.SingletonSeparatedList(
                                                SyntaxFactory.Attribute(
                                                    SyntaxFactory.IdentifierName("TestFixture"))))))
                                .WithModifiers(
                                    SyntaxFactory.TokenList(
                                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                                .WithMembers(
                                    SyntaxFactory.List(members));
    
        NamespaceDeclarationSyntax? curNamespace = classDeclaration.Parent as NamespaceDeclarationSyntax;

        CompilationUnitSyntax test; 
        string namespaceName = _generatorNamespace;
        
        if (isScopedNamespacesExist)
        {
            test = SyntaxFactory.CompilationUnit()
                    .WithMembers(SyntaxFactory.SingletonList<MemberDeclarationSyntax>(scopedNamespace!
                    .WithUsings(SyntaxFactory.List(usings))
                    .AddMembers(classDecl)
                    )).NormalizeWhitespace();
        } 
        else
        {
            if (curNamespace != null)
            {
                namespaceName = curNamespace.Name.ToString() + '.' + _generatorNamespace;
                // namespaceName = SyntaxFactory.QualifiedName(curNamespace.Name, _generatorNamespace);
                //cannot get right SimpleNameSyntax from string?
            }
            test = SyntaxFactory.CompilationUnit()
                    .WithUsings(SyntaxFactory.List(usings))
                    .AddMembers(SyntaxFactory.NamespaceDeclaration(
                            SyntaxFactory.IdentifierName(namespaceName))
                        .AddMembers(classDecl))
                    .NormalizeWhitespace();
        }
        
        
        return new Test(className, test.ToFullString());
    }
    
}